/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.20
 * Generated at: 2024-06-02 08:56:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.pages;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.icp.gadgets.model.User;
import com.icp.gadgets.doa.Cartdoa;
import com.icp.gadgets.model.CartItem;
import java.util.List;
import com.icp.gadgets.model.Order;
import java.util.ArrayList;
import com.icp.gadgets.doa.OrderDoa;
import com.icp.gadgets.doa.UserDoa;
import com.icp.gadgets.model.Product;
import com.icp.gadgets.doa.ProductDoa;

public final class myorders_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("com.icp.gadgets.doa.UserDoa");
    _jspx_imports_classes.add("com.icp.gadgets.model.CartItem");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("com.icp.gadgets.model.Product");
    _jspx_imports_classes.add("com.icp.gadgets.doa.ProductDoa");
    _jspx_imports_classes.add("com.icp.gadgets.model.User");
    _jspx_imports_classes.add("com.icp.gadgets.model.Order");
    _jspx_imports_classes.add("com.icp.gadgets.doa.Cartdoa");
    _jspx_imports_classes.add("com.icp.gadgets.doa.OrderDoa");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>My Orders</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../styles/global.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../styles/css/header.styles.css\">\r\n");
      out.write("    <script src=\"../script/myscript.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

    User user = (User) session.getAttribute("user");
    String userId = session.getAttribute("userId") == null ? null : session.getAttribute("userId").toString();
    int cartSize = 0;
//    String orderId = request.getParameter("orderId");
//    List<Order> orderItems = new ArrayList<>();
    List<Order> orders = new ArrayList<>();
    if (user != null) {
        request.setAttribute("user", user);
        Cartdoa cartdoa = new Cartdoa();
        List<CartItem> cartItems = cartdoa.getCartItemByUserID(user.getId());
        cartSize = cartItems.size();
        OrderDoa orderDoa = new OrderDoa();
        orders = orderDoa.getOrderByUserId(user.getId());
//        if(orderId != null && !orderId.isEmpty()){
//            orderItems = orderDoa.getAllOderItems(Integer.parseInt(orderId));
//        }
//        orderItems = orderDoa.getAllOderItems(Integer.parseInt(orderId));
    }

      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "header.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div style=\"height: 70vh\" class=\" mx-5\">\r\n");
      out.write("    <div class=\"container-fluid pt-5\" >\r\n");
      out.write("        <h1>My orders !</h1>\r\n");
      out.write("        <p>Here you can see all your orders</p>\r\n");
      out.write("\r\n");
      out.write("        ");

            if (orders.isEmpty()){
        
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <div class=\"alert alert-warning\" role=\"alert\">\r\n");
      out.write("            You have not placed any orders yet.\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        ");

            } else {
        
      out.write("\r\n");
      out.write("        <div class=\"row\">\r\n");
      out.write("            <div class=\"col-md-12\" >\r\n");
      out.write("                <table class=\"table table-bordered\">\r\n");
      out.write("                    <thead>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <th>Order ID</th>\r\n");
      out.write("                        <th>Order Date</th>\r\n");
      out.write("                        <th>Order Status</th>\r\n");
      out.write("                        <th>Order Total</th>\r\n");
      out.write("                        <th>Order Details</th>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    </thead>\r\n");
      out.write("                    <tbody>\r\n");
      out.write("                   ");

                       for (Order order:orders){
                   
      out.write("\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>");
      out.print(order.getOrder_id());
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print(order.getOrder_date());
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print(order.getOrder_status());
      out.write("</td>\r\n");
      out.write("                        <td>Rs.");
      out.print(order.getOrder_total());
      out.write("</td>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <button\r\n");
      out.write("                                    type=\"button\" class=\"btn btn-light btn-lg\" data-bs-toggle=\"modal\"\r\n");
      out.write("                                    data-bs-order-id=\"");
      out.print(order.getOrder_id());
      out.write("\"\r\n");
      out.write("                                    data-bs-user-id=\"");
      out.print(order.getUser_id());
      out.write("\"\r\n");
      out.write("                                     data-bs-target=\"#exampleModal\" style=\"background: coral\">\r\n");
      out.write("                                <i class=\"fas fa-info me-2\"></i> View Details\r\n");
      out.write("                            </button>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    ");

                        }
                    
      out.write("\r\n");
      out.write("                    </tbody>\r\n");
      out.write("                </table>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        ");

            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class=\"modal fade\" id=\"exampleModal\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\"\r\n");
      out.write("     aria-hidden=\"true\">\r\n");
      out.write("    <div class=\"modal-dialog\">\r\n");
      out.write("        <div class=\"modal-content\">\r\n");
      out.write("            <div class=\"modal-header border-bottom-0\">\r\n");
      out.write("                <button  type=\"button\"  class=\"btn-close\" data-bs-dismiss=\"modal\"  aria-label=\"Close\"></button>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"modal-body text-start p-4\">\r\n");
      out.write("                <h5 class=\"modal-title text-uppercase mb-5\" id=\"exampleModalLabel\">Order ID: ");
      out.print( request.getParameter("orderId") );
      out.write("</h5>\r\n");
      out.write("                <div id=\"modal-content\">\r\n");
      out.write("\r\n");
      out.write("                </div>\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "footer.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    var myModal = document.getElementById('exampleModal')\r\n");
      out.write("    myModal.addEventListener('show.bs.modal', function (event) {\r\n");
      out.write("        var button = event.relatedTarget\r\n");
      out.write("        var orderId = button.getAttribute('data-bs-order-id')\r\n");
      out.write("        var modalTitle = myModal.querySelector('.modal-title')\r\n");
      out.write("        var userId = button.getAttribute('data-bs-user-id')\r\n");
      out.write("        modalTitle.textContent = 'Order ID: ' + orderId\r\n");
      out.write("\r\n");
      out.write("        let xhr = new XMLHttpRequest();\r\n");
      out.write("        xhr.open(\"GET\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/orderItem?orderId=\"+orderId+'&userId='+userId, true);\r\n");
      out.write("        xhr.onreadystatechange = function() {\r\n");
      out.write("            console.log(xhr);\r\n");
      out.write("            if (xhr.readyState == 4 && xhr.status == 200) {\r\n");
      out.write("                document.getElementById('modal-content').innerHTML = xhr.responseText;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        xhr.send();\r\n");
      out.write("    })\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
